			+--------------------+
			|       CS 330       |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Kanghoi Choi <ganghoi@kaist.ac.kr>
JaeHoon Moon <evansjubeat@kaist.ac.kr>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, usage of tokens, or extra credit, please give them here.

Our group uses one token for this project.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

http://kcats.tistory.com/12
http://maplejune.tistory.com

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

#in thread.h
struct thread
  int64_t end;			/* wakeup time(ticks) of blocked thread. */

#in timer.c
  struct list blocked_list;	/* list of blocked(sleeping) threads. */
  static bool wakeup_early();	/* function which compares wakeup time. */



---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

when "timer_sleep()" is called, we get current tick by using "timer_ticks()".
then wakeup time should be start_tick + ticks
so I wrote "t->end = start + ticks;"
after that insert list_elem of current thread to "blocked_list."
Then block the thread.

Never check the thread until "timer_interrupt()" is called.
When "timer_interrupt()" is called
check all threads in "blocked_list",
whether current tick is larger than threads' wakeup time.
If wakeup time is over, remove threads' elem from "blocked_list"
and unblock the threads.


>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

As I talked, I push thread into "blocked_list" in "timer_sleep()".
I push threads and sort them immediately by using "list_insert_ordered()"

And then, in "timer_interrupt()" I check threads' wakeup time from front of list
using "list_front()".

If I meet a thread which doesn't reach wakeup time, I stop the while loop.
Because "blocked_list" is sorted, I do not have to see next threads.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

I disable interrupt by using "intr_disable()".
So other threads cannot call simultaneously.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

Same with A4.
I used interrupt disabling
so "timer_interrupt()" cannot be called during call to "timer_sleep()"

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

In first think, I thoght "blocked_list" should be in thread.c.
However, "blocked_list" is only used in timer.c.
So I changed it's location.

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

#in thread.h
struct thread
  int original_priority;	/* original priority */
  struct list locks;		/* list of lock which thread has */
  struct lock *target_lock;	/* lock which thread wants(not get yet) */
bool higher_priority();		/* compare threads' priority */
void donate_priority();		/* donate priority */
bool higher_priority_ready();	/* check whether higher priority in ready list */

#in synch.h
struct lock
  struct list_elem elem;	/* list_elem to make list of locks */
bool higher_priority_sema	/* compare sema's priority */
bool higher_priority_lock	/* compare lock's priority */

#in synch.c
struct semaphore_elem
  int priority			/* priority of semaphore */


>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

Refer to pdonation1.png to pdonation6.png in order. Thread structure now has original_priority variable that stores original priority before it had priority donation.


---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

When we put the thread in wait list, changed the method from attach to the back -> use insertion sort method so that the list is already sorted at the end of insertion.
used list_insert_ordered function.

Then, when there is lock release, sema up, take the frontmost(sorted to be having highest priority) thread to ensure it is the highest.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

If a thread holding lock has less priority than current running thread tries to acquire the lock, donate_priority() function is called.
Temporarily(until that lock-holding thread releases the lock) the priority is donated to solve the priority inversion problem.
If the donation is found to be nested, recursively call the donate_priority() function until the thread has no targeting lock.  

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

First, remove lock from list "locks"

Second, if original_priority is not -1,
which means priority of this thread is donated,
rollback the thread's priority.
At here, if locks, which the thread is holding, have waiting threads
get the highest priority of wating threads, and donate the priority.

Third, disable lock->holder ("lock->holder = NULL;")

Fourth, sema_up();


---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

When we doante priority, if many threads try to donate, priority can be editted
even though we don't want.
So we get only the highest priority.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

<<<<<<< HEAD
We choose this desing to control priority donation.
We considered every possible priority donation.


=======
There was no such other ways we considered. Our method to do this project was
trying passing each test, with finding out which one should be passed to pass the others.
>>>>>>> 166818d63fd2bf394fc0e3506ee63ecafb4361ee


			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

Clue was not enough, making us take lots of times

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

I found that how synchronize is important.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

I think 'how to see test file' is very important.
I didn't know what do functions in lower part of test files do.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

Teach that 'what is happend after creating thread'
Answer is 'call function which is parameter of create_thread()'

>> Any other comments?
